Some weights of the model checkpoint at allenai/longformer-base-4096 were not used when initializing LongformerModel: ['lm_head.dense.weight', 'lm_head.dense.bias', 'lm_head.layer_norm.weight', 'lm_head.layer_norm.bias', 'lm_head.bias', 'lm_head.decoder.weight']
- This IS expected if you are initializing LongformerModel from the checkpoint of a model trained on another task or with another architecture (e.g. initializing a BertForSequenceClassification model from a BertForPreTraining model).
- This IS NOT expected if you are initializing LongformerModel from the checkpoint of a model that you expect to be exactly identical (initializing a BertForSequenceClassification model from a BertForSequenceClassification model).
Some weights of the model checkpoint at emilyalsentzer/Bio_ClinicalBERT were not used when initializing BertModel: ['cls.predictions.transform.LayerNorm.bias', 'cls.seq_relationship.bias', 'cls.predictions.transform.dense.bias', 'cls.predictions.decoder.weight', 'cls.seq_relationship.weight', 'cls.predictions.transform.dense.weight', 'cls.predictions.bias', 'cls.predictions.transform.LayerNorm.weight']
- This IS expected if you are initializing BertModel from the checkpoint of a model trained on another task or with another architecture (e.g. initializing a BertForSequenceClassification model from a BertForPreTraining model).
- This IS NOT expected if you are initializing BertModel from the checkpoint of a model that you expect to be exactly identical (initializing a BertForSequenceClassification model from a BertForSequenceClassification model).
ehr loaded
cxr loaded
==> training
running for fusion_type fused_ehr
0
starting val epoch 0
Shape of vectors[EHR]: torch.Size([16, 77, 384])
Shape of self.token_vector_expanded: torch.Size([16, 1, 384])
Shape of vectors[EHR]: torch.Size([16, 77, 384])
Shape of self.token_vector_expanded: torch.Size([16, 1, 384])
Shape of vectors[EHR]: torch.Size([16, 77, 384])
Shape of self.token_vector_expanded: torch.Size([16, 1, 384])
Shape of vectors[EHR]: torch.Size([16, 77, 384])
Shape of self.token_vector_expanded: torch.Size([16, 1, 384])
Shape of vectors[EHR]: torch.Size([16, 77, 384])
Shape of self.token_vector_expanded: torch.Size([16, 1, 384])
Shape of vectors[EHR]: torch.Size([16, 77, 384])
Shape of self.token_vector_expanded: torch.Size([16, 1, 384])
Shape of vectors[EHR]: torch.Size([16, 77, 384])
Shape of self.token_vector_expanded: torch.Size([16, 1, 384])
Shape of vectors[EHR]: torch.Size([16, 77, 384])
Shape of self.token_vector_expanded: torch.Size([16, 1, 384])
Shape of vectors[EHR]: torch.Size([16, 77, 384])
Shape of self.token_vector_expanded: torch.Size([16, 1, 384])
Shape of vectors[EHR]: torch.Size([16, 77, 384])
Shape of self.token_vector_expanded: torch.Size([16, 1, 384])
Shape of vectors[EHR]: torch.Size([16, 77, 384])
Shape of self.token_vector_expanded: torch.Size([16, 1, 384])
Shape of vectors[EHR]: torch.Size([16, 77, 384])
Shape of self.token_vector_expanded: torch.Size([16, 1, 384])
Shape of vectors[EHR]: torch.Size([16, 77, 384])
Shape of self.token_vector_expanded: torch.Size([16, 1, 384])
Shape of vectors[EHR]: torch.Size([16, 77, 384])
Shape of self.token_vector_expanded: torch.Size([16, 1, 384])
Shape of vectors[EHR]: torch.Size([16, 77, 384])
Shape of self.token_vector_expanded: torch.Size([16, 1, 384])
Shape of vectors[EHR]: torch.Size([16, 77, 384])
Shape of self.token_vector_expanded: torch.Size([16, 1, 384])
Traceback (most recent call last):
  File "fusion_main.py", line 137, in <module>
    trainer.train()
  File "/scratch/baj321/MedFuse/trainers/DHF_trainer.py", line 537, in train
    ret = self.validate(self.val_dl)
  File "/scratch/baj321/MedFuse/trainers/DHF_trainer.py", line 473, in validate
    fused_vector = torch.cat((vectors[sorted_modalities[0]], self.token_vector_expanded), dim=1)
RuntimeError: Sizes of tensors must match except in dimension 0. Got 16 and 8 (The offending index is 0)
Shape of vectors[EHR]: torch.Size([16, 77, 384])
Shape of self.token_vector_expanded: torch.Size([16, 1, 384])
Shape of vectors[EHR]: torch.Size([16, 77, 384])
Shape of self.token_vector_expanded: torch.Size([16, 1, 384])
Shape of vectors[EHR]: torch.Size([16, 77, 384])
Shape of self.token_vector_expanded: torch.Size([16, 1, 384])
Shape of vectors[EHR]: torch.Size([16, 77, 384])
Shape of self.token_vector_expanded: torch.Size([16, 1, 384])
Shape of vectors[EHR]: torch.Size([16, 77, 384])
Shape of self.token_vector_expanded: torch.Size([16, 1, 384])
Shape of vectors[EHR]: torch.Size([16, 77, 384])
Shape of self.token_vector_expanded: torch.Size([16, 1, 384])
Shape of vectors[EHR]: torch.Size([16, 77, 384])
Shape of self.token_vector_expanded: torch.Size([16, 1, 384])
Shape of vectors[EHR]: torch.Size([16, 77, 384])
Shape of self.token_vector_expanded: torch.Size([16, 1, 384])
Shape of vectors[EHR]: torch.Size([16, 77, 384])
Shape of self.token_vector_expanded: torch.Size([16, 1, 384])
Shape of vectors[EHR]: torch.Size([16, 77, 384])
Shape of self.token_vector_expanded: torch.Size([16, 1, 384])
Shape of vectors[EHR]: torch.Size([16, 77, 384])
Shape of self.token_vector_expanded: torch.Size([16, 1, 384])
Shape of vectors[EHR]: torch.Size([16, 77, 384])
Shape of self.token_vector_expanded: torch.Size([16, 1, 384])
Shape of vectors[EHR]: torch.Size([16, 77, 384])
Shape of self.token_vector_expanded: torch.Size([16, 1, 384])
Shape of vectors[EHR]: torch.Size([16, 77, 384])
Shape of self.token_vector_expanded: torch.Size([16, 1, 384])
Shape of vectors[EHR]: torch.Size([8, 77, 384])
Shape of self.token_vector_expanded: torch.Size([16, 1, 384])